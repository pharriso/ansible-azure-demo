---

- name: setup tower host for azure demo
  hosts: localhost
  connection: local
  vars:
    tower_inventory: azure
    tower_org: Default
    tower_project: azure-playbooks
    tower_project_url:  https://github.com/pharriso/ansible-azure-demo.git
    tower_jobs:
      - {"name": "azure create windows vm", "playbook": "create_windows_vm.yml", "credential": "azure", "ask_extra_vars": "yes", "concurrent_jobs_enabled": "yes" }
      - {"name": "azure create network", "playbook": "create_virtual_network.yml", "credential": "azure" }
      - {"name": "azure create resource group", "playbook": "create_resource_group.yml", "credential": "azure" }
      - {"name": "azure create f5 appliance", "playbook": "create_f5_vm.yml", "credential": "azure" }
      - {"name": "azure windows config mgmt", "playbook": "windows_config_mgmt.yml", "credential": "azure windows", "ask_limit": "yes", "limit": "windows" }
      - {"name": "azure f5 config", "playbook": "f5_config.yml", "credential": "f5" }
      - {"name": "azure windows powershell", "playbook": "windows_powershell.yml", "credential": "azure windows", "limit": "windows" }
      - {"name": "azure windows dotnet", "playbook": "windows_dotnet.yml", "credential": "azure windows", "limit": "windows" }
      - {"name": "azure windows dotnet update app", "playbook": "windows_dotnet_update_app.yml", "credential": "f5", "limit": "windows" }
  tasks:

  - name: install servicenow python module
    pip:
      name: pysnow
    become: true

  - name: template out tower-cli file
    blockinfile:
      path: /home/{{ ansible_user_id }}/.tower_cli.cfg
      create: true
      block: |
        host: localhost
        username: admin
        password: {{ tower_password }}
        verify_ssl: false

  - name: create azure credential
    tower_credential:
      tower_verify_ssl: false
      name: azure
      organization: "{{ tower_org }}"
      subscription: "{{ azure_subscription }}"
      client: "{{ azure_client_id }}"
      secret: "{{ azure_secret }}"
      tenant: "{{ azure_tenant }}"
      kind: azure_rm

  - name: create azure inventory in tower
    tower_inventory:
      name: "{{ tower_inventory }}"
      organization: "{{ tower_org }}"
      state: present

  - name: create azure inventory source in tower
    tower_inventory_source:
      name: azure source
      inventory: "{{ tower_inventory }}"
      credential: azure
      source: azure_rm
      update_on_launch: true
      overwrite: true
      state: present
      validate_certs: false

  - name: create tower project
    shell: tower-cli project create --name {{ tower_project }} --organization {{ tower_org }} --scm-type git --scm-url {{ tower_project_url }} --scm-clean false --scm-delete-on-update false --scm-update-on-launch true --monitor

  - name: Add windows Azure credential
    tower_credential:
      tower_verify_ssl: false
      name: azure windows
      organization: "{{ tower_org }}"
      password: "{{ windows_password }}"
      username: "{{ windows_user }}"
      kind: ssh

  - name: create snow credential type
    shell: tower-cli credential_type create  --name snow --inputs @files/snow_cred_input  --injectors @files/snow_cred_inject --kind cloud

  - name: create snow credential
    shell: "tower-cli credential create --name snow --organization Default --credential-type snow --inputs='{\"snow_user\": \"admin\", \"snow_password\": \"{{ snow_password }}\", \"snow_instance\": \"{{ snow_instance }}\"}'"

  - name: create f5 credential type
    shell: tower-cli credential_type create  --name f5 --inputs @files/f5_cred_input  --injectors @files/f5_cred_inject --kind cloud

  - name: create f5 credential
    shell: "tower-cli credential create --name f5 --organization Default --credential-type f5 --inputs='{\"f5_user\": \"{{ windows_user }}\", \"f5_password\": \"{{ windows_password }}\"}'"

  - name: create tower job templates
    tower_job_template:
      name: "{{ item.name }}"
      job_type: "run"
      inventory: "{{ tower_inventory }}"
      project: "{{ tower_project }}"
      playbook: "{{ item.playbook }}"
      credential: azure windows
      ask_limit: "{{ item.ask_limit | default('no') }}"
      limit: "{{ item.limit | default('') }}"
      ask_extra_vars: "{{ item.ask_extra_vars | default('no') }}"
      concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default('no') }}"
    loop: "{{ tower_jobs }}"

  - name: add credential to job template
    shell: tower-cli job_template associate_credential --job-template "{{ item.name }}" --credential "{{ item.credential }}"
    loop: "{{ tower_jobs }}"
    when: item.credential != 'azure windows'

  - name: create tower workflow
    tower_workflow_template:
      name: azure deploy app
      schema: "{{ lookup('file', 'azure_schema') }}"

  - name: create f5 snow member job template
    shell: tower-cli job_template create --name "azure manage f5" --job-type run --inventory {{ tower_inventory }} --project {{ tower_project }} --playbook bigip_pool_member_snow.yml --survey-enabled true --survey-spec @files/job_survey  --ask-variables-on-launch true --credential "azure windows"

  - name: add f5 credential to job template
    shell: tower-cli job_template associate_credential --job-template "{{ item }}" --credential f5
    loop:
      - azure f5 config
      - azure windows dotnet update app

  - name: add snow credential to job template
    shell: tower-cli job_template associate_credential --job-template "azure windows dotnet update app" --credential snow
